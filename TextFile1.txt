

drawTriangleLeft:
    // r0 is x
	// r1 is y
	// r2 is height
	// r3 is colour
	push	{r4-r10, lr}
    
    currentX       .req        r4
    currentY  .req        r5
    height  .req        r6
    colour  .req        r7
    i       .req        r8
    ymin    .req        r9
    ymax    .req        r10

	mov		currentX, r0	//x start
	mov		currentY, r1	//y start
	mov		height, r2	//height
	mov		colour, r3	//colour
	mov		i, #0	//iterator
	mov		ymin, r5  //ymin
	mov		ymax, r5	//ymax

leftCheckHeight:
    cmp i, height
    bge leftEnd

leftCheckWidth:
    cmp ymin, currentY
    bgt leftEnd2

    mov r0, currentX
    mov r1, currentY
    mov r3, colour
    drawPixel

    add ystart, #1
    b   leftCheckWidth

leftEnd2:
    sub ymin, #1
    add ymax, #1
    mov currentY, ymin
    add i, #1
    add currentX, #1
    b   leftCheckHeight

leftEnd:

    .unreq  xStart
    .unreq  yStart
    .unreq  height
    .unreq  colour
    .unreq  i
    .unreq  ymin
    .unreq  ymax

    pop {r4-r10, pc}


drawTriangleDown:
// r0 is the x
// r1 is the y
// r2 is the height
// r3 is the colour
	push	{r4-r10, lr}
    currentX      .req         r4
    currentY      .req         r5
    height      .req         r6
    colour      .req         r7
    i           .req         r8
    xMin        .req         r9
    xMax        .req         r10

	mov		currentX, r0	//x start
	mov		currentY, r1	//y start
	mov		height, r2		//height
	mov		colour, r3		//colour
	mov		i, #0		    //counter
	mov		xMin, r4		//xMin for each row
	mov		xMax, r4		//xMax for each row

downCheckHeight:
	cmp		i, height       //compares height and i
	bge		downEnd         //branches if i >= height
	
downCheckWidth:
	cmp		currentX, xMax  //compares current x with max
	bgt		downEnd2        //branches if current x > max
	mov		r0, currentX    //moves value of x into r0
	mov		r1, currentY    //moves value of y into r1
	mov		r2, colour      //moves value of colour into r2
	bl		drawPixel       //calls drawPixel
	add		currentX, #1    //increments currentX
	b	    downCheckWidth  //branches to top of loop

downEnd2:
	sub		xMin, #1        //decrements xMin
	add		xMax, #1        //increments xMax
	mov		currentX, xMin  //sets current X to xMin
	sub		currentY,	#1  //subtracts 1 from currentY to draw next row to the left
	add		i, #1           //increments counter
	b		downCheckHeight //branches to top of loop

downEnd:
	
	pop		{r4-r10, pc}