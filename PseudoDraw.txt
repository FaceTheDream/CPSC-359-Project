drawPixel(x,y,colour) //returns nothing, int x, int y.

drawRect(x,y,colour,lenX,lenY) { //(x,y), top left starting position, lenX=length of horizontal side, lenY = length of vertical side
	for ( i = 0; i < lenX; i++) {
		for (j = 0; j < lenY; j++) {
			drawPixel(x+i,y+j,colour)
		}
	}
}


//*
 * direction = 001 // horizontal (y=y,x++) (start at left)
 * direction = 010 // vertical (y++,x=x) (start at base)
 * direction = 011 // diagonal down (y++,x++) (start at top left)
 * direction = 101 // diagonal up (y--,x++) (start at bottom left)
*/
drawLine(x,y,direction,length,thickness,colour) {
	a = thickness - 1
	a = a/2
	for ( i = 0; i < length; i++) {
		drawPixel(x,y,colour)
		if ( (direction & 2 == 1 || direction & 4 == 1) && thickness > 1) {
			drawRect(x-a,y,colour,a,1)
			drawRect(x,y,colour,a,1)
		}
		if (direction & 1 == 1) {
			if (thickness > 1) {
				drawRect(x,y-a,colour,1,a)
				drawRect(x,y,colour,1,a)
			}
			x++;
		}
		if (direction & 2 == 1) {
			y++;
		} else if (direction & 4 == 1) {
			y--;
		}
	}
}

//will draw an isosceles triangle
// (x,y) is the tip of the triangle
// direction = 00 = up
// direction = 01 = down
// direction = 10 = left
// direction = 11 = right
drawTriangle(x,y,height,colour,direction) {
	if (direction == 0) {
		drawTriangleUp(x,y,height,colour)
	} else if (direction == 1) {
		drawTriangleDown(x,y,height,colour)
	} else if (direction == 2) {
		drawTriangleLeft(x,y,height,colour)
	} else {
		drawTriangleRight(x,y,height,colour)
	}
}

drawTriangleUp(x,y,height,colour) {
	for ( i = 0; i < height; i++) {
		drawLine(x-i,y+i,1,2*i+1,1,colour)
	}
}

drawTriangleDown(x,y,height,colour) {
	for ( i = 0; i < height; i++) {
		drawLine(x-i,y-i,1,2*i+1,1,colour)
	}
}

drawTriangleLeft(x,y,height,colour) {
	for ( i = 0; i < height; i++) {
		drawLine(x+i,y+i,2,2*i+1,1,colour)
	}
}

drawTriangleRight(x,y,height,colour) {
	for ( i = 0; i < height; i++) {
		drawLine(x-i,y+i,2,2*i+1,1,colour)
	}
}

//(x,y) is the midpoint on the bottom of the crown
// four-point crown
drawCrown(x,y,width,height) {
	
}//should return max/mins for x/y

drawBee(x,y,colour,size) {

}// should return max/mins for x/y

drawBeePawn(x,y) {
	drawBee(x,y,yellow,normal)
}// should return max/mins for x/y

drawBeeKnight(x,y) {
	drawBee(x,y,red,normal*1.5)
}//should return max/mins for x/y

drawBeeQueen(x,y) {
	drawBee(x,y,yellow,normal*2)
	x = (start point of crown)
	y = (start point of crown)
	drawCrown(x,y,queenCWid,queenCHeight)
}//should return max/mins for x/y

drawBush(x,y)  { // draws green rectangular 'bush'
	
} // should return max/mins for x/y

drawPlayer(x,y) {  // draw brown bear with white helmet, very blocky
	
}// should return max/mins for x/y

drawLazer(x,y) { // red rectangle that is the lazer
	drawRect(x,y,red,lazerLenX,lazerLenY);
} // should return max/mins for x/y

drawBeeSting(x,y,direction) { // black triangle that is the bees' bullets
	
} // should return max/mins for x/y

drawCursor(x,y) // Some colour right-pointing triangle that points to the option to be selected
